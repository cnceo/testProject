// Simple Diffuse lighting Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 120

// Incoming per vertex... position and normal
attribute vec4 vVertex;
attribute vec3 vNormal;

// Set per batch
uniform vec4    ambientColor;
uniform vec4    diffuseColor;   
uniform vec4    specularColor;

uniform vec3	vLightPosition;
uniform mat4	mvpMatrix;
uniform mat4	mvMatrix;
uniform mat3	normalMatrix;

// Color to fragment program
varying vec4 vVaryingColor;

void main(void) 
    { 
    // 获取表面法线的视觉坐标
    vec3 vEyeNormal = normalMatrix * vNormal;

    // 获取顶点的视觉坐标
    vec4 vPosition4 = mvMatrix * vVertex;
    vec3 vPosition3 = vPosition4.xyz / vPosition4.w;
    // vec3 vPosition3 = normalMatrix * (vVertex.xyz / vVertex.w);

    // 获取到光源的向量
    vec3 vLightDir = normalize(vLightPosition - vPosition3);

    // dot得到漫反射强度
    float diff = max(0.0, dot(vEyeNormal, vLightDir));

    // 强度乘以漫反射颜色
    vVaryingColor = diff * diffuseColor;
    vVaryingColor.a = 1.0;

    // 添加环境光
    vVaryingColor += ambientColor;


    // 镜面光
    vec3 vReflection = normalize(reflect(-vLightDir, vEyeNormal));
    float spec = max(0.0, dot(vEyeNormal, vReflection));
    if(diff != 0) {
        float fSpec = pow(spec, 128.0);
        vVaryingColor.rgb += vec3(fSpec, fSpec, fSpec);
    }

    //多边形投影变换
    gl_Position = mvpMatrix * vVertex;
    }