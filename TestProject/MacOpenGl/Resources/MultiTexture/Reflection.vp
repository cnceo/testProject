// Reflection Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 120

// Incoming per vertex... position and normal
attribute vec4 vVertex;
attribute vec3 vNormal;
attribute vec2 vTexCoords;

uniform mat4   mvpMatrix;
uniform mat4   mvMatrix;
uniform mat3   normalMatrix;
uniform mat4   mInverseCamera;

// Texture coordinate to fragment program
varying vec3 vVaryingTexCoord;
varying vec2 vTarnishCoords;

void main(void) 
    {
    // 视觉空间的法线
    vec3 vEyeNormal = normalMatrix * vNormal;
    
    // 视觉空间中的顶点位置
    vec4 vVert4 = mvMatrix * vVertex;
    vec3 vEyeVertex = normalize(vVert4.xyz / vVert4.w);
    
    // 获取反射向量
    vec4 vCoords = vec4(reflect(vEyeVertex, vEyeNormal), 1.0);
   
    // 通过反转照相机旋转
    vCoords = mInverseCamera * vCoords;
    vVaryingTexCoord.xyz = normalize(vCoords.xyz);

    vTarnishCoords = vTexCoords.st;
    
    // Don't forget to transform the geometry!
    gl_Position = mvpMatrix * vVertex;
    }
